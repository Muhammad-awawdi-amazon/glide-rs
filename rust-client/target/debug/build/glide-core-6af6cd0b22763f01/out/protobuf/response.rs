// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 3.20.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protobuf/response.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:response.RequestError)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RequestError {
    // message fields
    // @@protoc_insertion_point(field:response.RequestError.type)
    pub type_: ::protobuf::EnumOrUnknown<RequestErrorType>,
    // @@protoc_insertion_point(field:response.RequestError.message)
    pub message: ::protobuf::Chars,
    // special fields
    // @@protoc_insertion_point(special_field:response.RequestError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RequestError {
    fn default() -> &'a RequestError {
        <RequestError as ::protobuf::Message>::default_instance()
    }
}

impl RequestError {
    pub fn new() -> RequestError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &RequestError| { &m.type_ },
            |m: &mut RequestError| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &RequestError| { &m.message },
            |m: &mut RequestError| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequestError>(
            "RequestError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RequestError {
    const NAME: &'static str = "RequestError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.message = is.read_tokio_chars()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(RequestErrorType::Unspecified) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(RequestErrorType::Unspecified) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RequestError {
        RequestError::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(RequestErrorType::Unspecified);
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RequestError {
        static instance: RequestError = RequestError {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            message: ::protobuf::Chars::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RequestError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RequestError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RequestError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:response.Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:response.Response.callback_idx)
    pub callback_idx: u32,
    // @@protoc_insertion_point(field:response.Response.is_push)
    pub is_push: bool,
    // message oneof groups
    pub value: ::std::option::Option<response::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:response.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // uint64 resp_pointer = 2;

    pub fn resp_pointer(&self) -> u64 {
        match self.value {
            ::std::option::Option::Some(response::Value::RespPointer(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_resp_pointer(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_resp_pointer(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(response::Value::RespPointer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_resp_pointer(&mut self, v: u64) {
        self.value = ::std::option::Option::Some(response::Value::RespPointer(v))
    }

    // .response.ConstantResponse constant_response = 3;

    pub fn constant_response(&self) -> ConstantResponse {
        match self.value {
            ::std::option::Option::Some(response::Value::ConstantResponse(v)) => ::protobuf::EnumOrUnknown::enum_value_or_default(&v),
            _ => ConstantResponse::OK,
        }
    }

    pub fn clear_constant_response(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_constant_response(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(response::Value::ConstantResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_constant_response(&mut self, v: ConstantResponse) {
        self.value = ::std::option::Option::Some(response::Value::ConstantResponse(::protobuf::EnumOrUnknown::new(v)))
    }

    // .response.RequestError request_error = 4;

    pub fn request_error(&self) -> &RequestError {
        match self.value {
            ::std::option::Option::Some(response::Value::RequestError(ref v)) => v,
            _ => <RequestError as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_request_error(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_request_error(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(response::Value::RequestError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_request_error(&mut self, v: RequestError) {
        self.value = ::std::option::Option::Some(response::Value::RequestError(v))
    }

    // Mutable pointer to the field.
    pub fn mut_request_error(&mut self) -> &mut RequestError {
        if let ::std::option::Option::Some(response::Value::RequestError(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(response::Value::RequestError(RequestError::new()));
        }
        match self.value {
            ::std::option::Option::Some(response::Value::RequestError(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_request_error(&mut self) -> RequestError {
        if self.has_request_error() {
            match self.value.take() {
                ::std::option::Option::Some(response::Value::RequestError(v)) => v,
                _ => panic!(),
            }
        } else {
            RequestError::new()
        }
    }

    // string closing_error = 5;

    pub fn closing_error(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(response::Value::ClosingError(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_closing_error(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_closing_error(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(response::Value::ClosingError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_closing_error(&mut self, v: ::protobuf::Chars) {
        self.value = ::std::option::Option::Some(response::Value::ClosingError(v))
    }

    // Mutable pointer to the field.
    pub fn mut_closing_error(&mut self) -> &mut ::protobuf::Chars {
        if let ::std::option::Option::Some(response::Value::ClosingError(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(response::Value::ClosingError(::protobuf::Chars::new()));
        }
        match self.value {
            ::std::option::Option::Some(response::Value::ClosingError(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_closing_error(&mut self) -> ::protobuf::Chars {
        if self.has_closing_error() {
            match self.value.take() {
                ::std::option::Option::Some(response::Value::ClosingError(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::Chars::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "callback_idx",
            |m: &Response| { &m.callback_idx },
            |m: &mut Response| { &mut m.callback_idx },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "resp_pointer",
            Response::has_resp_pointer,
            Response::resp_pointer,
            Response::set_resp_pointer,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_enum_accessors::<_, _>(
            "constant_response",
            |message: &Response| match &message.value {
                ::std::option::Option::Some(response::Value::ConstantResponse(e)) => ::std::option::Option::Some(*e),
                _ => ::std::option::Option::None,
            },
            |message: &mut Response, e: ::protobuf::EnumOrUnknown<ConstantResponse>| {
                message.value = ::std::option::Option::Some(response::Value::ConstantResponse(e));
            },
            ConstantResponse::OK,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RequestError>(
            "request_error",
            Response::has_request_error,
            Response::request_error,
            Response::mut_request_error,
            Response::set_request_error,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "closing_error",
            Response::has_closing_error,
            Response::closing_error,
            Response::set_closing_error,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_push",
            |m: &Response| { &m.is_push },
            |m: &mut Response| { &mut m.is_push },
        ));
        oneofs.push(response::Value::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.callback_idx = is.read_uint32()?;
                },
                16 => {
                    self.value = ::std::option::Option::Some(response::Value::RespPointer(is.read_uint64()?));
                },
                24 => {
                    self.value = ::std::option::Option::Some(response::Value::ConstantResponse(is.read_enum_or_unknown()?));
                },
                34 => {
                    self.value = ::std::option::Option::Some(response::Value::RequestError(is.read_message()?));
                },
                42 => {
                    self.value = ::std::option::Option::Some(response::Value::ClosingError(is.read_tokio_chars()?));
                },
                48 => {
                    self.is_push = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.callback_idx != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.callback_idx);
        }
        if self.is_push != false {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &response::Value::RespPointer(v) => {
                    my_size += ::protobuf::rt::uint64_size(2, v);
                },
                &response::Value::ConstantResponse(v) => {
                    my_size += ::protobuf::rt::int32_size(3, v.value());
                },
                &response::Value::RequestError(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Value::ClosingError(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.callback_idx != 0 {
            os.write_uint32(1, self.callback_idx)?;
        }
        if self.is_push != false {
            os.write_bool(6, self.is_push)?;
        }
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &response::Value::RespPointer(v) => {
                    os.write_uint64(2, v)?;
                },
                &response::Value::ConstantResponse(v) => {
                    os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
                },
                &response::Value::RequestError(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &response::Value::ClosingError(ref v) => {
                    os.write_string(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.callback_idx = 0;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.is_push = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            callback_idx: 0,
            is_push: false,
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Response`
pub mod response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:response.Response.value)
    pub enum Value {
        // @@protoc_insertion_point(oneof_field:response.Response.resp_pointer)
        RespPointer(u64),
        // @@protoc_insertion_point(oneof_field:response.Response.constant_response)
        ConstantResponse(::protobuf::EnumOrUnknown<super::ConstantResponse>),
        // @@protoc_insertion_point(oneof_field:response.Response.request_error)
        RequestError(super::RequestError),
        // @@protoc_insertion_point(oneof_field:response.Response.closing_error)
        ClosingError(::protobuf::Chars),
    }

    impl ::protobuf::Oneof for Value {
    }

    impl ::protobuf::OneofFull for Value {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Response as ::protobuf::MessageFull>::descriptor().oneof_by_name("value").unwrap()).clone()
        }
    }

    impl Value {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Value>("value")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:response.RequestErrorType)
pub enum RequestErrorType {
    // @@protoc_insertion_point(enum_value:response.RequestErrorType.Unspecified)
    Unspecified = 0,
    // @@protoc_insertion_point(enum_value:response.RequestErrorType.ExecAbort)
    ExecAbort = 1,
    // @@protoc_insertion_point(enum_value:response.RequestErrorType.Timeout)
    Timeout = 2,
    // @@protoc_insertion_point(enum_value:response.RequestErrorType.Disconnect)
    Disconnect = 3,
}

impl ::protobuf::Enum for RequestErrorType {
    const NAME: &'static str = "RequestErrorType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RequestErrorType> {
        match value {
            0 => ::std::option::Option::Some(RequestErrorType::Unspecified),
            1 => ::std::option::Option::Some(RequestErrorType::ExecAbort),
            2 => ::std::option::Option::Some(RequestErrorType::Timeout),
            3 => ::std::option::Option::Some(RequestErrorType::Disconnect),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<RequestErrorType> {
        match str {
            "Unspecified" => ::std::option::Option::Some(RequestErrorType::Unspecified),
            "ExecAbort" => ::std::option::Option::Some(RequestErrorType::ExecAbort),
            "Timeout" => ::std::option::Option::Some(RequestErrorType::Timeout),
            "Disconnect" => ::std::option::Option::Some(RequestErrorType::Disconnect),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [RequestErrorType] = &[
        RequestErrorType::Unspecified,
        RequestErrorType::ExecAbort,
        RequestErrorType::Timeout,
        RequestErrorType::Disconnect,
    ];
}

impl ::protobuf::EnumFull for RequestErrorType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("RequestErrorType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for RequestErrorType {
    fn default() -> Self {
        RequestErrorType::Unspecified
    }
}

impl RequestErrorType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<RequestErrorType>("RequestErrorType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:response.ConstantResponse)
pub enum ConstantResponse {
    // @@protoc_insertion_point(enum_value:response.ConstantResponse.OK)
    OK = 0,
}

impl ::protobuf::Enum for ConstantResponse {
    const NAME: &'static str = "ConstantResponse";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConstantResponse> {
        match value {
            0 => ::std::option::Option::Some(ConstantResponse::OK),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ConstantResponse> {
        match str {
            "OK" => ::std::option::Option::Some(ConstantResponse::OK),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ConstantResponse] = &[
        ConstantResponse::OK,
    ];
}

impl ::protobuf::EnumFull for ConstantResponse {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ConstantResponse").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ConstantResponse {
    fn default() -> Self {
        ConstantResponse::OK
    }
}

impl ConstantResponse {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ConstantResponse>("ConstantResponse")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17protobuf/response.proto\x12\x08response\"X\n\x0cRequestError\x12.\
    \n\x04type\x18\x01\x20\x01(\x0e2\x1a.response.RequestErrorTypeR\x04type\
    \x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"\xa5\x02\n\x08Resp\
    onse\x12!\n\x0ccallback_idx\x18\x01\x20\x01(\rR\x0bcallbackIdx\x12#\n\
    \x0cresp_pointer\x18\x02\x20\x01(\x04H\0R\x0brespPointer\x12I\n\x11const\
    ant_response\x18\x03\x20\x01(\x0e2\x1a.response.ConstantResponseH\0R\x10\
    constantResponse\x12=\n\rrequest_error\x18\x04\x20\x01(\x0b2\x16.respons\
    e.RequestErrorH\0R\x0crequestError\x12%\n\rclosing_error\x18\x05\x20\x01\
    (\tH\0R\x0cclosingError\x12\x17\n\x07is_push\x18\x06\x20\x01(\x08R\x06is\
    PushB\x07\n\x05value*O\n\x10RequestErrorType\x12\x0f\n\x0bUnspecified\
    \x10\0\x12\r\n\tExecAbort\x10\x01\x12\x0b\n\x07Timeout\x10\x02\x12\x0e\n\
    \nDisconnect\x10\x03*\x1a\n\x10ConstantResponse\x12\x06\n\x02OK\x10\0b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(RequestError::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(RequestErrorType::generated_enum_descriptor_data());
            enums.push(ConstantResponse::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
